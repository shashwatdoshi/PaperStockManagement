using System;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using DevExpress.XtraBars.Navigation;
using ProjectStockManagement.PaperStockManagementDB;
using ProjectStockManagement.Utility;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraGrid.Views.Base;
using System.Collections.Generic;
using System.Data.Entity;

namespace ProjectStockManagement
{
    public partial class PaperStockManagement : Form
    {
        /// <summary>
        /// Contains all added values for Breaking-force(BF).
        /// </summary>
        public static BindingList<int> BFList = new BindingList<int>();

        /// <summary>
        /// Contains all added values for Gram per square meter(GSM).
        /// </summary>
        public static BindingList<int> GSMList = new BindingList<int>();

        /// <summary>
        /// Contains all added values for Party detail(Party name).
        /// </summary>
        public static BindingList<string> PartyNameList = new BindingList<string>();

        /// <summary>
        /// Contains all added values for Stock detail in format.
        /// </summary>
        public static BindingList<string> ExStockList = new BindingList<string>();

        /// <summary>
        /// Initialize insatance(constructor) of PaperStockManagement.
        /// </summary>
        public PaperStockManagement()
        {
            InitializeComponent();

            // Get data from database.
            FetchDBListData();

            // Set data to member variables.
            AssignDBListData();

            gridControl1.DataSource = CreateDataSource();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            ProjectStockManagement.PaperStockManagementDB.PaperStockManagementDBEntities dbContext = new ProjectStockManagement.PaperStockManagementDB.PaperStockManagementDBEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.Orders.LoadAsync().ContinueWith(loadTask =>
            {
    // Bind data to control when loading complete
    dispatchOrderGridControl.DataSource = dbContext.Orders.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        /// <summary>
        /// Get data values from database.
        /// </summary>
        private void FetchDBListData()
        {
            using (var paperStockManagementDB = new PaperStockManagementDBEntities())
            {
                foreach (BreakingForce breakingForce in paperStockManagementDB.BreakingForces.ToList())
                {
                    BFList.Add(breakingForce.Value);
                }

                foreach (GSM gsm in paperStockManagementDB.GSMs.ToList())
                {
                    GSMList.Add(gsm.Value);
                }

                foreach (Client client in paperStockManagementDB.Clients.ToList())
                {
                    PartyNameList.Add(client.Name);
                }

                foreach (Stock stockInventory in
                    paperStockManagementDB.Stocks.ToList())
                {
                    string stockFormat = string.Format(Constant.StockDataFormat,
                        stockInventory.BreakingForce, stockInventory.GSM,
                        stockInventory.Size, stockInventory.Weight,
                        stockInventory.Quantity);
                    ExStockList.Add(stockFormat);
                }
            }
        }

        /// <summary>
        /// Set data values to member variables.
        /// </summary>
        private void AssignDBListData()
        {
            // Add data to all BF contained combobox.
            cmbBF.DataSource = BFList;
            cmbManualDispatchBF.DataSource = BFList;
            cmbReportBF.DataSource = BFList;

            // Add data to all GSM contained combobox.
            cmbGSM.DataSource = GSMList;
            cmbManualDispatchGSM.DataSource = GSMList;
            cmbReportGSM.DataSource = GSMList;

            // Add data to all Party detail contained combobox.
            cmbAddOrderPartyName.DataSource = PartyNameList;
            cmbPartyName.DataSource = PartyNameList;
            cmbReportPartyName.DataSource = PartyNameList;

            // Add data to BF | GSM | SIZE | WEIGHT | QUANTITY contained combobox.
            cmbAddOrderDetail.DataSource = ExStockList;
        }

        /// <summary>
        /// Open Add Break-force form on-click.
        /// </summary>
        /// <param name="sender">Instance of Object.</param>
        /// <param name="e">Instance of EventArgs.</param>
        private void btnAddBF_Click(object sender, EventArgs e)
        {
            AddBF addBF = new AddBF();
            addBF.Show();
        }

        /// <summary>
        /// Open Add GSM form on-click.
        /// </summary>
        /// <param name="sender">Instance of Object.</param>
        /// <param name="e">Instance of EventArgs.</param>
        private void btnAddGSM_Click(object sender, EventArgs e)
        {
            AddGSM addGSM = new AddGSM();
            addGSM.Show();
        }

        /// <summary>
        /// Open Party detail form on button click.
        /// </summary>
        /// <param name="sender">Instance of Object.</param>
        /// <param name="e">Instance of EventArgs.</param>
        private void btnAddParty_Click(object sender, EventArgs e)
        {
            AddPartyDetail addPartyDetail = new AddPartyDetail();
            addPartyDetail.Show();
        }

        /// <summary>
        /// Open Print dailog on button click.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnPrintReport_Click(object sender, EventArgs e)
        {
            dlgPrintReport.ShowDialog();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender">Instance of Object.</param>
        /// <param name="e">Instance of SelectedPageChangingEventArgs.</param>
        private void mainNavigation_SelectedPageChanging(object sender, SelectedPageChangingEventArgs e)
        {
            RefreshDataSource();
        }

        /// <summary>
        /// Refresh data sources.
        /// </summary>
        private void RefreshDataSource()
        {
            BFList.ResetBindings();
            GSMList.ResetBindings();
            PartyNameList.ResetBindings();
            ExStockList.ResetBindings();
        }

        /// <summary>
        /// Save all the data on button click.
        /// </summary>
        /// <param name="sender">Instance of Object.</param>
        /// <param name="e">Instance of EventsArgs.</param>
        private void btnSave_Click(object sender, EventArgs e)
        {
            using (var paperStockManagementDB = new PaperStockManagementDBEntities())
            {
                // Add new stock values to database.
                var stock = new Stock();
                stock.BreakingForce = Int32.Parse(cmbBF.SelectedItem.ToString());
                stock.GSM = Int32.Parse(cmbGSM.SelectedItem.ToString());
                stock.Weight = Int32.Parse(txtWeight.Text);
                stock.Size = Int32.Parse(txtSize.Text);
                stock.Quantity = Int32.Parse(txtStockQuantity.Text);
                paperStockManagementDB.Stocks.Add(stock);
                paperStockManagementDB.SaveChanges();

                string stockFormat = string.Format(Constant.StockDataFormat,
                        stock.BreakingForce, stock.GSM,
                        stock.Size, stock.Weight,
                        stock.Quantity);
                ExStockList.Add(stockFormat);
            }
        }

        DataTable dataTable;
        private DataTable CreateDataSource()
        {
            dataTable = new DataTable();
            dataTable.TableName = "GridTempTable";
            dataTable.Columns.Add("StockID", typeof(int));
            dataTable.Columns.Add("Client", typeof(string));
            dataTable.Columns.Add("BF", typeof(int));
            dataTable.Columns.Add("GSM", typeof(int));
            dataTable.Columns.Add("Size", typeof(float));
            dataTable.Columns.Add("Weight", typeof(float));
            dataTable.Columns.Add("Quantity", typeof(long));
            dataTable.Columns.Add("ClientID", typeof(int));

            return dataTable;
        }

        private void btnAddOrder_Click(object sender, EventArgs e)
        {
            //Mock rows added.
            DataRow row = dataTable.NewRow();
            row[1] = cmbAddOrderPartyName.SelectedValue;

            using (var paperStockManagementDB = new PaperStockManagementDBEntities())
            {
                Stock stock = paperStockManagementDB.Stocks.ToList()[cmbAddOrderDetail.SelectedIndex];
                row[0] = stock.ID;
                row[2] = stock.BreakingForce;
                row[3] = stock.GSM;
                row[4] = stock.Size;
                row[5] = stock.Weight;
                row[6] = stock.Quantity;
                Client client = paperStockManagementDB.Clients.ToList()[cmbAddOrderPartyName.SelectedIndex];
                row[7] = client.ID;
            }

            dataTable.Rows.Add(row);
            gridControl1.RefreshDataSource();
        }

        private void gridView1_ValidateRow(object sender, ValidateRowEventArgs e)
        {
            var view = sender as GridView;

            var listSourceRowIndex = view.GetDataSourceRowIndex(e.RowHandle);

            var id = (int)dataTable.Rows[listSourceRowIndex][0];

            Stock stock = GetStockInventoryFromInventoryByID(id);

            var quantity = int.Parse(view.GetRowCellValue(e.RowHandle, "Quantity").ToString());

            if (stock.Quantity < quantity)
            {
                e.Valid = false;
            }
        }

        private void btnSaveOrder_Click(object sender, EventArgs e)
        {
            using (var paperStockManagementDB = new PaperStockManagementDBEntities())
            {
                for (int i = 0; i < addOrderGridView.DataRowCount; i++)
                {
                    Order order = new Order();
                    order.AddedDate = DateTime.Now;

                    var id = int.Parse(addOrderGridView.GetRowCellValue(i, "StockID").ToString());

                    Stock stock = GetStockInventoryFromInventoryByID(id);

                    int quantity = int.Parse(addOrderGridView.GetRowCellValue(i, "Quantity").ToString());

                    paperStockManagementDB.Stocks.Find(stock.ID).Quantity -= quantity;

                    order.StockID = stock.ID;
                    order.Quantity = quantity;
                    order.ClientID = int.Parse(addOrderGridView.GetRowCellValue(i, "ClientID").ToString());

                    paperStockManagementDB.Orders.Add(order);
                    AddOrder addOrder = new AddOrder();
                    addOrder.Order = order;
                    paperStockManagementDB.AddOrders.Add(addOrder);
                }

                paperStockManagementDB.SaveChanges();
            }

            dataTable.Rows.Clear();

            gridControl1.RefreshDataSource();
        }

        private Stock GetStockInventoryFromInventoryByID(int id)
        {
            using (var paperStockManagementDB = new PaperStockManagementDBEntities())
            {
                foreach (Stock stocks in
                    paperStockManagementDB.Stocks.ToList())
                {
                    if (stocks.ID == id)
                    {
                        return stocks;
                    }
                }
            }

            return null;
        }

        private void cmbPartyName_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void dispatchOrderButton_Click(object sender, EventArgs e)
        {
            using (var paperStockManagementDB = new PaperStockManagementDBEntities())
            {
                for (int i = 0; i < dispatchOrderGridView.DataRowCount; i++)
                {
                    if (dispatchOrderGridView.IsRowSelected(i))
                    {

                    }
                }
            }
        }
    }
}